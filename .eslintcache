[{"D:\\programming\\js\\react\\react-weather\\src\\index.tsx":"1","D:\\programming\\js\\react\\react-weather\\src\\components\\App.tsx":"2","D:\\programming\\js\\react\\react-weather\\src\\components\\Header.tsx":"3","D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherList.tsx":"4","D:\\programming\\js\\react\\react-weather\\src\\components\\Navbar.tsx":"5","D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherItem.tsx":"6","D:\\programming\\js\\react\\react-weather\\src\\apis\\WeatherService.ts":"7","D:\\programming\\js\\react\\react-weather\\src\\types\\index.ts":"8","D:\\programming\\js\\react\\react-weather\\src\\components\\Error.tsx":"9","D:\\programming\\js\\react\\react-weather\\src\\components\\Loader.tsx":"10","D:\\programming\\js\\react\\react-weather\\src\\types\\WeatherListItem.ts":"11","D:\\programming\\js\\react\\react-weather\\src\\context\\index.ts":"12","D:\\programming\\js\\react\\react-weather\\src\\context\\weatherDataContext.ts":"13","D:\\programming\\js\\react\\react-weather\\src\\context\\fetchingContext.ts":"14","D:\\programming\\js\\react\\react-weather\\src\\context\\asideContext.ts":"15","D:\\programming\\js\\react\\react-weather\\src\\context\\darkModeContext.ts":"16","D:\\programming\\js\\react\\react-weather\\src\\components\\Chart.tsx":"17","D:\\programming\\js\\react\\react-weather\\src\\hoc\\withData.tsx":"18","D:\\programming\\js\\react\\react-weather\\src\\components\\DayPage.tsx":"19"},{"size":182,"mtime":1608717067620,"results":"20","hashOfConfig":"21"},{"size":4915,"mtime":1609938696008,"results":"22","hashOfConfig":"21"},{"size":3606,"mtime":1609938968548,"results":"23","hashOfConfig":"21"},{"size":574,"mtime":1609930778494,"results":"24","hashOfConfig":"21"},{"size":4294,"mtime":1609938878224,"results":"25","hashOfConfig":"21"},{"size":3273,"mtime":1609938997507,"results":"26","hashOfConfig":"21"},{"size":2133,"mtime":1609938906789,"results":"27","hashOfConfig":"21"},{"size":472,"mtime":1609920492623,"results":"28","hashOfConfig":"21"},{"size":377,"mtime":1609771087357,"results":"29","hashOfConfig":"21"},{"size":612,"mtime":1609919302397,"results":"30","hashOfConfig":"21"},{"size":1242,"mtime":1609920706276,"results":"31","hashOfConfig":"21"},{"size":312,"mtime":1609759680415,"results":"32","hashOfConfig":"21"},{"size":172,"mtime":1609760391380,"results":"33","hashOfConfig":"21"},{"size":163,"mtime":1609760395387,"results":"34","hashOfConfig":"21"},{"size":154,"mtime":1609760408511,"results":"35","hashOfConfig":"21"},{"size":163,"mtime":1609760400191,"results":"36","hashOfConfig":"21"},{"size":2178,"mtime":1609935303842,"results":"37","hashOfConfig":"21"},{"size":666,"mtime":1609918789603,"results":"38","hashOfConfig":"21"},{"size":3410,"mtime":1609938947229,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1i47tem",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},"D:\\programming\\js\\react\\react-weather\\src\\index.tsx",[],["83","84"],"D:\\programming\\js\\react\\react-weather\\src\\components\\App.tsx",["85"],"import React, { useEffect, useState } from 'react'\r\nimport { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\r\n\r\nimport { IError, IWeatherData } from '../types'\r\nimport WeatherService from '../apis/WeatherService'\r\nimport { AsideContext, DarkModeContext, FetchingContext, WeatherDataContext } from '../context'\r\n\r\nimport DayPage from './DayPage'\r\nimport Header from './Header'\r\nimport Navbar from './Navbar'\r\nimport WeatherList from './WeatherList'\r\n\r\nconst App = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [isDarkMode, setIsDarkMode] = useState(false)\r\n  const [weatherData, setWeatherData] = useState<IWeatherData>({ weatherList: [], name: '' })\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [isAnimationEnds, setIsAnimationEnds] = useState(false)\r\n  const [error, setError] = useState<IError>({ isError: false, message: '' })\r\n\r\n  const { name, weatherList } = weatherData\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      setIsLoading(true)\r\n      navigator.geolocation.getCurrentPosition(({ coords }) => {\r\n        WeatherService.fetchWeatherByCoords(coords.latitude, coords.longitude)\r\n          .then(setWeatherData)\r\n          .catch(catchWeatherAPIError)\r\n          .finally(() => setIsLoading(false))\r\n      }, catchPositionError)\r\n    } else {\r\n      onError('Геолокация недоступна, введите город вручную.')\r\n    }\r\n  }, [])\r\n\r\n  const onError = (message: string) => {\r\n    setError({\r\n      isError: true,\r\n      message\r\n    })\r\n  }\r\n\r\n  const resetError = () => {\r\n    setError({\r\n      isError: false,\r\n      message: ''\r\n    })\r\n  }\r\n\r\n  const resetWeatherData = () => {\r\n    setWeatherData({\r\n      name: '',\r\n      weatherList: []\r\n    })\r\n  }\r\n\r\n  const catchPositionError = (err: GeolocationPositionError) => {\r\n    switch (err.code) {\r\n      case 1:\r\n        onError('Геолокация выключена, введите местоположение вручную.')\r\n        break\r\n      case 2:\r\n        onError('Не удалось получить геолокацию.')\r\n        break\r\n      default:\r\n        onError('Ошибка сети или сервера.')\r\n        break\r\n    }\r\n  }\r\n\r\n  const catchWeatherAPIError = (err: Error) => {\r\n    switch (err.message) {\r\n      case '404':\r\n        onError('Город не найден.')\r\n        break\r\n      case '429':\r\n        onError('Слишком много запросов в минуту.')\r\n        break\r\n      default:\r\n        onError('Ошибка сети или сервера.')\r\n        break\r\n    }\r\n    resetWeatherData()\r\n  }\r\n\r\n  const setWeatherByCityName = (city: string) => (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    if (city.length > 0) {\r\n      setIsAnimationEnds(false)\r\n      document.querySelector('input')?.blur()\r\n      resetError()\r\n      setIsLoading(true)\r\n      WeatherService.fetchWeatherByCityName(city)\r\n        .then(setWeatherData)\r\n        .catch(catchWeatherAPIError)\r\n        .finally(() => setIsLoading(false))\r\n    }\r\n  }\r\n\r\n  const toggleNavbar = (open: boolean) => (\r\n    event: React.KeyboardEvent | React.MouseEvent,\r\n  ) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' ||\r\n        (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return\r\n    }\r\n\r\n    setIsOpen(open)\r\n  }\r\n\r\n  const closeNavbar = () => {\r\n    setIsOpen(false)\r\n  }\r\n\r\n  const toggleDarkMode = () => {\r\n    setIsDarkMode(prevState => !prevState)\r\n  }\r\n\r\n  const endAnimation = () => setIsAnimationEnds(true)\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: isDarkMode ? 'dark' : 'light',\r\n        },\r\n      }),\r\n    [isDarkMode],\r\n  )\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <AsideContext.Provider value={{ isOpen, toggleNavbar, closeNavbar }} >\r\n        <DarkModeContext.Provider value={{ isDarkMode, toggleDarkMode }}>\r\n          <FetchingContext.Provider value={{ error, isLoading, endAnimation, isAnimationEnds }}>\r\n            <WeatherDataContext.Provider value={{ setWeatherByCityName, currentPlace: name, weatherList }}>\r\n              <CssBaseline />\r\n              <Router>\r\n                <Header />\r\n                <Navbar />\r\n                <Switch>\r\n                  <Route path=\"/\" component={WeatherList} exact />\r\n                  <Route path=\"/:id\" component={DayPage} exact />\r\n                  <Route path=\"*\">\r\n                    <Redirect to=\"/\" />\r\n                  </Route>\r\n                </Switch>\r\n              </Router>\r\n            </WeatherDataContext.Provider>\r\n          </FetchingContext.Provider>\r\n        </DarkModeContext.Provider>\r\n      </AsideContext.Provider>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App","D:\\programming\\js\\react\\react-weather\\src\\components\\Header.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherList.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Navbar.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherItem.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\apis\\WeatherService.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\types\\index.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Error.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Loader.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\types\\WeatherListItem.ts",[],["86","87"],"D:\\programming\\js\\react\\react-weather\\src\\context\\index.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\context\\weatherDataContext.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\context\\fetchingContext.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\context\\asideContext.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\context\\darkModeContext.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Chart.tsx",["88"],"import React, { useEffect } from 'react'\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"\r\nimport { makeStyles, Paper, useTheme } from '@material-ui/core'\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport * as am4charts from '@amcharts/amcharts4/charts'\r\nimport { IWeatherListItem } from '../types'\r\n\r\nam4core.useTheme(am4themes_animated)\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '45vh'\r\n    },\r\n    paper: {\r\n        padding: '1.5rem 1rem 1rem 1rem'\r\n    }\r\n})\r\n\r\ntype Props = {\r\n    weatherList: IWeatherListItem[]\r\n}\r\n\r\nconst Chart: React.FC<Props> = ({ weatherList }) => {\r\n    const { palette: { type } } = useTheme()\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        const chart = am4core.create('chart', am4charts.XYChart)\r\n        chart.data = weatherList\r\n\r\n        const dateAxis = chart.xAxes.push(new am4charts.DateAxis())\r\n        dateAxis.renderer.grid.template.location = 0\r\n        if (type === 'dark') {\r\n            dateAxis.renderer.grid.template.stroke = am4core.color('#fff')\r\n            dateAxis.renderer.labels.template.fill = am4core.color('#fff')\r\n        }\r\n\r\n        const valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n        valueAxis!.tooltip!.disabled = true\r\n        valueAxis.renderer.minWidth = 35\r\n        if (type === 'dark') {\r\n            valueAxis.renderer.grid.template.stroke = am4core.color('#fff')\r\n            valueAxis.renderer.labels.template.fill = am4core.color('#fff')\r\n        }\r\n\r\n        const series = chart.series.push(new am4charts.LineSeries())\r\n        series.dataFields.dateX = 'dt'\r\n        series.dataFields.valueY = 'temp'\r\n        series.tooltipText = '{valueY.value}'\r\n        if (type === 'dark') {\r\n            series.stroke = am4core.color('#fff')\r\n        }\r\n\r\n        chart.cursor = new am4charts.XYCursor()\r\n        chart.cursor.behavior = 'none';\r\n        return () => {\r\n            chart.dispose()\r\n        }\r\n\r\n    }, [type])\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <div id=\"chart\" className={classes.root}></div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Chart","D:\\programming\\js\\react\\react-weather\\src\\hoc\\withData.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\DayPage.tsx",["89"],"import React, { useContext, useEffect } from 'react'\r\nimport { Redirect, useParams } from 'react-router-dom'\r\nimport { Container, Grid, Typography } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { FetchingContext, WeatherDataContext } from '../context'\r\nimport withData from '../hoc/withData'\r\n\r\nimport Chart from './Chart'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    temp: {\r\n        position: 'relative',\r\n        marginRight: '2rem',\r\n        '&>sup': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            right: '-1rem'\r\n        }\r\n    },\r\n    center: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    image: {\r\n        width: 100,\r\n        height: 100,\r\n        borderRadius: '50%',\r\n        backgroundColor: theme.palette.primary.light\r\n    },\r\n    container: {\r\n        paddingTop: '1rem',\r\n        paddingBottom: '1rem',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-between',\r\n        height: 'calc(100vh - 64px)',\r\n        [theme.breakpoints.down('xs')]: {\r\n            height: 'calc(100vh - 56px)'\r\n        }\r\n    },\r\n}))\r\n\r\ntype Params = {\r\n    id: string\r\n}\r\n\r\nconst DayPage = () => {\r\n    const { weatherList, currentPlace } = useContext(WeatherDataContext)\r\n    const { endAnimation } = useContext(FetchingContext)\r\n    const { id } = useParams<Params>()\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        endAnimation!()\r\n    }, [])\r\n\r\n    const index = parseInt(id)\r\n\r\n    if (weatherList![index] === undefined) return <Redirect to=\"/\" />\r\n\r\n    const { day, description, hours, icon, temp, humidity, pressure } = weatherList![index][0]\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            <div className=\"content\">\r\n                <Typography variant=\"h4\" component=\"h1\">\r\n                    {currentPlace}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" component=\"h2\">\r\n                    {day} {hours}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" component=\"div\">\r\n                    {description}\r\n                </Typography>\r\n                <Grid className={classes.center} container>\r\n                    <Grid className={classes.center} item>\r\n                        <Typography className={classes.temp} variant=\"h2\" component=\"div\">\r\n                            {temp}\r\n                            <Typography variant=\"caption\" component=\"sup\">\r\n                                °C\r\n                                </Typography>\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid className={classes.center} item>\r\n                        <img className={classes.image} src={`http://openweathermap.org/img/wn/${icon}@4x.png`} alt={description} />\r\n                    </Grid>\r\n                </Grid>\r\n                <Typography variant=\"subtitle1\" component=\"div\">\r\n                    Влажность: {humidity}%\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" component=\"div\">\r\n                    Давление: {pressure} мм рт.\r\n                </Typography>\r\n            </div>\r\n            <Chart weatherList={weatherList![index]} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withData(DayPage)",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":36,"column":6,"nodeType":"96","endLine":36,"endColumn":8,"suggestions":"97"},{"ruleId":"90","replacedBy":"98"},{"ruleId":"92","replacedBy":"99"},{"ruleId":"94","severity":1,"message":"100","line":61,"column":8,"nodeType":"96","endLine":61,"endColumn":14,"suggestions":"101"},{"ruleId":"94","severity":1,"message":"102","line":57,"column":8,"nodeType":"96","endLine":57,"endColumn":10,"suggestions":"103"},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'catchPositionError' and 'catchWeatherAPIError'. Either include them or remove the dependency array.","ArrayExpression",["106"],["104"],["105"],"React Hook useEffect has a missing dependency: 'weatherList'. Either include it or remove the dependency array.",["107"],"React Hook useEffect has a missing dependency: 'endAnimation'. Either include it or remove the dependency array.",["108"],"no-global-assign","no-unsafe-negation",{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},"Update the dependencies array to be: [catchPositionError, catchWeatherAPIError]",{"range":"115","text":"116"},"Update the dependencies array to be: [type, weatherList]",{"range":"117","text":"118"},"Update the dependencies array to be: [endAnimation]",{"range":"119","text":"120"},[1489,1491],"[catchPositionError, catchWeatherAPIError]",[1999,2005],"[type, weatherList]",[1531,1533],"[endAnimation]"]