[{"D:\\programming\\js\\react\\react-weather\\src\\index.tsx":"1","D:\\programming\\js\\react\\react-weather\\src\\components\\App.tsx":"2","D:\\programming\\js\\react\\react-weather\\src\\components\\Header.tsx":"3","D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherList.tsx":"4","D:\\programming\\js\\react\\react-weather\\src\\components\\Navbar.tsx":"5","D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherItem.tsx":"6","D:\\programming\\js\\react\\react-weather\\src\\apis\\WeatherService.ts":"7","D:\\programming\\js\\react\\react-weather\\src\\types\\index.ts":"8","D:\\programming\\js\\react\\react-weather\\src\\components\\Error.tsx":"9","D:\\programming\\js\\react\\react-weather\\src\\components\\Loader.tsx":"10","D:\\programming\\js\\react\\react-weather\\src\\types\\WeatherListItem.ts":"11"},{"size":182,"mtime":1608717067620,"results":"12","hashOfConfig":"13"},{"size":3958,"mtime":1609590702888,"results":"14","hashOfConfig":"13"},{"size":3676,"mtime":1609590702892,"results":"15","hashOfConfig":"13"},{"size":797,"mtime":1609591380418,"results":"16","hashOfConfig":"13"},{"size":4021,"mtime":1609590702892,"results":"17","hashOfConfig":"13"},{"size":2792,"mtime":1609591096180,"results":"18","hashOfConfig":"13"},{"size":1692,"mtime":1609590702888,"results":"19","hashOfConfig":"13"},{"size":495,"mtime":1609590702898,"results":"20","hashOfConfig":"13"},{"size":379,"mtime":1609590702888,"results":"21","hashOfConfig":"13"},{"size":534,"mtime":1609151977052,"results":"22","hashOfConfig":"13"},{"size":948,"mtime":1609590702892,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1i47tem",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"D:\\programming\\js\\react\\react-weather\\src\\index.tsx",[],["49","50"],"D:\\programming\\js\\react\\react-weather\\src\\components\\App.tsx",["51"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport Header from \"./Header\"\r\nimport WeatherList from \"./WeatherList\"\r\nimport Navbar from \"./Navbar\"\r\n\r\nimport WeatherService from '../apis/WeatherService'\r\n\r\nimport { IError, IWeatherData } from '../types'\r\nimport { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core'\r\n\r\nconst App = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [isDarkMode, setIsDarkCheme] = useState(false)\r\n  const [weatherData, setWeatherData] = useState<IWeatherData>({ weatherList: [], name: '' })\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState<IError>({ isError: false, message: '' })\r\n\r\n  useEffect(() => {\r\n    resetError()\r\n    if (navigator.geolocation) {\r\n      setIsLoading(true)\r\n      navigator.geolocation.getCurrentPosition(({ coords }) => {\r\n        WeatherService.fetchWeatherByCoords(coords.latitude, coords.longitude)\r\n          .then(setWeatherData)\r\n          .catch(catchWeatherAPIError)\r\n          .finally(() => setIsLoading(false))\r\n      }, catchPositionError)\r\n    } else {\r\n      onError('Геолокация недоступна, введите город вручную.')\r\n    }\r\n  }, [])\r\n\r\n  const onError = (message: string) => {\r\n    setError({\r\n      isError: true,\r\n      message\r\n    })\r\n  }\r\n\r\n  const resetError = () => {\r\n    setError({\r\n      isError: false,\r\n      message: ''\r\n    })\r\n  }\r\n\r\n  const resetWeatherData = () => {\r\n    setWeatherData({\r\n      name: '',\r\n      weatherList: []\r\n    })\r\n  }\r\n\r\n  const catchPositionError = (err: GeolocationPositionError) => {\r\n    switch (err.code) {\r\n      case 1:\r\n        onError('Геолокация выключена, введите местоположение вручную.')\r\n        break\r\n      case 2:\r\n        onError('Не удалось получить геолокацию.')\r\n        break\r\n      default:\r\n        onError('Ошибка сети или сервера.')\r\n        break\r\n    }\r\n    resetWeatherData()\r\n  }\r\n\r\n  const catchWeatherAPIError = (err: Error) => {\r\n    switch (err.message) {\r\n      case '404':\r\n        onError('Город не найден.')\r\n        break\r\n      case '429':\r\n        onError('Слишком много запросов в минуту.')\r\n        break\r\n      default:\r\n        onError('Ошибка сети или сервера.')\r\n        break\r\n    }\r\n    resetWeatherData()\r\n  }\r\n\r\n  const setWeatherByCityName = (city: string) => (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    if (city.length > 0) {\r\n      resetError()\r\n      setIsLoading(true)\r\n      WeatherService.fetchWeatherByCityName(city)\r\n        .then(setWeatherData)\r\n        .catch(catchWeatherAPIError)\r\n        .finally(() => setIsLoading(false))\r\n    }\r\n  }\r\n\r\n  const toggleNavbar = (open: boolean) => (\r\n    event: React.KeyboardEvent | React.MouseEvent,\r\n  ) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' ||\r\n        (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return\r\n    }\r\n\r\n    setIsOpen(open)\r\n  }\r\n\r\n  const toggleCheme = () => {\r\n    setIsDarkCheme(prevCheme => !prevCheme)\r\n  }\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: isDarkMode ? 'dark' : 'light',\r\n        },\r\n      }),\r\n    [isDarkMode],\r\n  )\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline />\r\n      <Navbar\r\n        isOpen={isOpen}\r\n        toggleNavbar={toggleNavbar}\r\n        isDarkMode={isDarkMode}\r\n        toggleCheme={toggleCheme}\r\n      />\r\n      <Header\r\n        toggleNavbar={toggleNavbar}\r\n        setWeatherByCityName={setWeatherByCityName}\r\n        currentPlace={weatherData.name}\r\n      />\r\n      <WeatherList\r\n        weatherList={weatherData.weatherList}\r\n        error={error}\r\n        isLoading={isLoading}\r\n      />\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App","D:\\programming\\js\\react\\react-weather\\src\\components\\Header.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherList.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Navbar.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherItem.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\apis\\WeatherService.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\types\\index.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Error.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Loader.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\types\\WeatherListItem.ts",[],["52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":32,"column":6,"nodeType":"60","endLine":32,"endColumn":8,"suggestions":"61"},{"ruleId":"54","replacedBy":"62"},{"ruleId":"56","replacedBy":"63"},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'catchPositionError' and 'catchWeatherAPIError'. Either include them or remove the dependency array.","ArrayExpression",["66"],["64"],["65"],"no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [catchPositionError, catchWeatherAPIError]",{"range":"69","text":"70"},[1183,1185],"[catchPositionError, catchWeatherAPIError]"]