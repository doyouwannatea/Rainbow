[{"D:\\programming\\js\\react\\react-weather\\src\\index.tsx":"1","D:\\programming\\js\\react\\react-weather\\src\\components\\App.tsx":"2","D:\\programming\\js\\react\\react-weather\\src\\components\\Header.tsx":"3","D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherList.tsx":"4","D:\\programming\\js\\react\\react-weather\\src\\components\\Navbar.tsx":"5","D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherItem.tsx":"6","D:\\programming\\js\\react\\react-weather\\src\\apis\\WeatherService.ts":"7","D:\\programming\\js\\react\\react-weather\\src\\types\\index.ts":"8","D:\\programming\\js\\react\\react-weather\\src\\types\\WeatherData.ts":"9","D:\\programming\\js\\react\\react-weather\\src\\components\\Error.tsx":"10","D:\\programming\\js\\react\\react-weather\\src\\components\\Loader.tsx":"11"},{"size":182,"mtime":1608717067620,"results":"12","hashOfConfig":"13"},{"size":3417,"mtime":1609170060619,"results":"14","hashOfConfig":"13"},{"size":3531,"mtime":1609169912164,"results":"15","hashOfConfig":"13"},{"size":724,"mtime":1609558110329,"results":"16","hashOfConfig":"13"},{"size":4025,"mtime":1608953854590,"results":"17","hashOfConfig":"13"},{"size":2445,"mtime":1609560306353,"results":"18","hashOfConfig":"13"},{"size":1612,"mtime":1609169473061,"results":"19","hashOfConfig":"13"},{"size":386,"mtime":1609155419027,"results":"20","hashOfConfig":"13"},{"size":964,"mtime":1609155450955,"results":"21","hashOfConfig":"13"},{"size":351,"mtime":1609052551679,"results":"22","hashOfConfig":"13"},{"size":534,"mtime":1609151977052,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1i47tem",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"D:\\programming\\js\\react\\react-weather\\src\\index.tsx",[],["48","49"],"D:\\programming\\js\\react\\react-weather\\src\\components\\App.tsx",["50"],"import React, { useEffect, useState } from 'react'\r\n\r\nimport Header from \"./Header\"\r\nimport WeatherList from \"./WeatherList\"\r\nimport Navbar from \"./Navbar\"\r\n\r\nimport WeatherService from '../apis/WeatherService'\r\n\r\nimport { IError, IWeatherData } from '../types'\r\n\r\nconst App = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [isDarkCheme, setIsDarkCheme] = useState(false)\r\n  const [weatherList, setWeatherList] = useState<IWeatherData[]>([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [error, setError] = useState<IError>({ isError: false, message: '' })\r\n\r\n  useEffect(() => {\r\n    resetError()\r\n    if (navigator.geolocation) {\r\n      setIsLoading(true)\r\n      navigator.geolocation.getCurrentPosition(({ coords }) => {\r\n        WeatherService.fetchWeatherByCoords(coords.latitude, coords.longitude)\r\n          .then(setWeatherList)\r\n          .catch(catchWeatherAPIError)\r\n          .finally(() => setIsLoading(false))\r\n      }, catchPositionError)\r\n    } else {\r\n      onError('Геолокация недоступна, введите город вручную.')\r\n    }\r\n  }, [])\r\n\r\n  const onError = (message: string) => {\r\n    setError({\r\n      isError: true,\r\n      message\r\n    })\r\n  }\r\n\r\n  const resetError = () => {\r\n    setError({\r\n      isError: false,\r\n      message: ''\r\n    })\r\n  }\r\n\r\n  const catchPositionError = (err: GeolocationPositionError) => {\r\n    switch (err.code) {\r\n      case 1:\r\n        onError('Геолокация выключена, введите местоположение вручную.')\r\n        break\r\n      case 2:\r\n        onError('Не удалось получить геолокацию.')\r\n        break\r\n      default:\r\n        onError('Ошибка сети или сервера.')\r\n        break\r\n    }\r\n  }\r\n\r\n  const catchWeatherAPIError = (err: Error) => {\r\n    switch (err.message) {\r\n      case '404':\r\n        onError('Город не найден.')\r\n        break\r\n      case '429':\r\n        onError('Слишком много запросов в минуту.')\r\n        break\r\n      default:\r\n        onError('Ошибка сети или сервера.')\r\n        break\r\n    }\r\n  }\r\n\r\n  const setWeatherByCityName = (city: string) => (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    if (city.length > 0) {\r\n      resetError()\r\n      setIsLoading(true)\r\n      WeatherService.fetchWeatherByCityName(city)\r\n        .then(setWeatherList)\r\n        .catch(catchWeatherAPIError)\r\n        .finally(() => setIsLoading(false))\r\n    }\r\n  }\r\n\r\n  const toggleNavbar = (open: boolean) => (\r\n    event: React.KeyboardEvent | React.MouseEvent,\r\n  ) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' ||\r\n        (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return\r\n    }\r\n\r\n    setIsOpen(open)\r\n  }\r\n\r\n  const toggleCheme = () => {\r\n    setIsDarkCheme(prevCheme => !prevCheme)\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Navbar\r\n        isOpen={isOpen}\r\n        toggleNavbar={toggleNavbar}\r\n        isDarkCheme={isDarkCheme}\r\n        toggleCheme={toggleCheme}\r\n      />\r\n      <Header\r\n        toggleNavbar={toggleNavbar}\r\n        setWeatherByCityName={setWeatherByCityName}\r\n      />\r\n      <WeatherList\r\n        weatherList={weatherList}\r\n        error={error}\r\n        isLoading={isLoading}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","D:\\programming\\js\\react\\react-weather\\src\\components\\Header.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherList.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Navbar.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\WeatherItem.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\apis\\WeatherService.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\types\\index.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\types\\WeatherData.ts",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Error.tsx",[],"D:\\programming\\js\\react\\react-weather\\src\\components\\Loader.tsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":31,"column":6,"nodeType":"57","endLine":31,"endColumn":8,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'catchPositionError' and 'catchWeatherAPIError'. Either include them or remove the dependency array.","ArrayExpression",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [catchPositionError, catchWeatherAPIError]",{"range":"64","text":"65"},[1079,1081],"[catchPositionError, catchWeatherAPIError]"]