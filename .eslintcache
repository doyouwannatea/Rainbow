[{"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\index.tsx":"1","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\App.tsx":"2","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\apis\\WeatherService.ts":"3","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Header.tsx":"4","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Navbar.tsx":"5","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\DayPage.tsx":"6","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\WeatherList.tsx":"7","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\index.ts":"8","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\navbarContext.ts":"9","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Chart.tsx":"10","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\WeatherItem.tsx":"11","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\hoc\\withData.tsx":"12","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\weatherDataContext.ts":"13","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\types\\index.ts":"14","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\fetchingContext.ts":"15","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\darkModeContext.ts":"16","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Loader.tsx":"17","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Error.tsx":"18","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\types\\WeatherListItem.ts":"19"},{"size":182,"mtime":1625767325273,"results":"20","hashOfConfig":"21"},{"size":4894,"mtime":1625767325262,"results":"22","hashOfConfig":"21"},{"size":2133,"mtime":1625767325259,"results":"23","hashOfConfig":"21"},{"size":3218,"mtime":1625767325264,"results":"24","hashOfConfig":"21"},{"size":4300,"mtime":1625767325266,"results":"25","hashOfConfig":"21"},{"size":3590,"mtime":1625767325263,"results":"26","hashOfConfig":"21"},{"size":574,"mtime":1625767325267,"results":"27","hashOfConfig":"21"},{"size":315,"mtime":1625767325270,"results":"28","hashOfConfig":"21"},{"size":157,"mtime":1625767325270,"results":"29","hashOfConfig":"21"},{"size":2364,"mtime":1625767325262,"results":"30","hashOfConfig":"21"},{"size":3273,"mtime":1625767325267,"results":"31","hashOfConfig":"21"},{"size":666,"mtime":1625767325272,"results":"32","hashOfConfig":"21"},{"size":172,"mtime":1625767325271,"results":"33","hashOfConfig":"21"},{"size":472,"mtime":1625767325277,"results":"34","hashOfConfig":"21"},{"size":163,"mtime":1625767325269,"results":"35","hashOfConfig":"21"},{"size":163,"mtime":1625767325268,"results":"36","hashOfConfig":"21"},{"size":612,"mtime":1625767325265,"results":"37","hashOfConfig":"21"},{"size":377,"mtime":1625767325264,"results":"38","hashOfConfig":"21"},{"size":1242,"mtime":1625767325275,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1sh2jr6",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\index.tsx",[],["83","84"],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\App.tsx",["85"],"import React, { useEffect, useState } from 'react'\r\nimport { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\r\n\r\nimport { IError, IWeatherData } from '../types'\r\nimport WeatherService from '../apis/WeatherService'\r\nimport { NavbarContext, DarkModeContext, FetchingContext, WeatherDataContext } from '../context'\r\n\r\nimport DayPage from './DayPage'\r\nimport Header from './Header'\r\nimport Navbar from './Navbar'\r\nimport WeatherList from './WeatherList'\r\n\r\nconst App = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [isDarkMode, setIsDarkMode] = useState(false)\r\n  const [weatherData, setWeatherData] = useState<IWeatherData>({ weatherList: [], name: '' })\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [isAnimationEnds, setIsAnimationEnds] = useState(false)\r\n  const [error, setError] = useState<IError>({ isError: false, message: '' })\r\n\r\n  const { name, weatherList } = weatherData\r\n\r\n  useEffect(() => {\r\n    if (navigator.geolocation) {\r\n      setIsLoading(true)\r\n      navigator.geolocation.getCurrentPosition(({ coords }) => {\r\n        WeatherService.fetchWeatherByCoords(coords.latitude, coords.longitude)\r\n          .then(setWeatherData)\r\n          .catch(catchWeatherAPIError)\r\n          .finally(() => setIsLoading(false))\r\n      }, catchPositionError)\r\n    } else {\r\n      onError('Геолокация недоступна, введите город вручную.')\r\n    }\r\n  }, [])\r\n\r\n  const onError = (message: string) => {\r\n    setError({\r\n      isError: true,\r\n      message\r\n    })\r\n  }\r\n\r\n  const resetError = () => {\r\n    setError({\r\n      isError: false,\r\n      message: ''\r\n    })\r\n  }\r\n\r\n  const resetWeatherData = () => {\r\n    setWeatherData({\r\n      name: '',\r\n      weatherList: []\r\n    })\r\n  }\r\n\r\n  const catchPositionError = (err: GeolocationPositionError) => {\r\n    switch (err.code) {\r\n      case 1:\r\n        onError('Геолокация выключена, введите местоположение вручную.')\r\n        break\r\n      case 2:\r\n        onError('Не удалось получить геолокацию.')\r\n        break\r\n      default:\r\n        onError('Ошибка сети или сервера.')\r\n        break\r\n    }\r\n  }\r\n\r\n  const catchWeatherAPIError = (err: Error) => {\r\n    switch (err.message) {\r\n      case '404':\r\n        onError('Город не найден.')\r\n        break\r\n      case '429':\r\n        onError('Слишком много запросов в минуту.')\r\n        break\r\n      default:\r\n        onError('Ошибка сети или сервера.')\r\n        break\r\n    }\r\n    resetWeatherData()\r\n  }\r\n\r\n  const setWeatherByCityName = (city: string) => (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    if (city.length > 0) {\r\n      setIsAnimationEnds(false)\r\n      document.querySelector('input')?.blur()\r\n      resetError()\r\n      setIsLoading(true)\r\n      WeatherService.fetchWeatherByCityName(city)\r\n        .then(setWeatherData)\r\n        .catch(catchWeatherAPIError)\r\n        .finally(() => setIsLoading(false))\r\n    }\r\n  }\r\n\r\n  const toggleNavbar = (open: boolean) => (\r\n    event: React.KeyboardEvent | React.MouseEvent,\r\n  ) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      ((event as React.KeyboardEvent).key === 'Tab' ||\r\n        (event as React.KeyboardEvent).key === 'Shift')\r\n    ) {\r\n      return\r\n    }\r\n\r\n    setIsOpen(open)\r\n  }\r\n\r\n  const closeNavbar = () => setIsOpen(false)\r\n\r\n  const toggleDarkMode = () => setIsDarkMode(prevState => !prevState)\r\n\r\n  const endAnimation = () => setIsAnimationEnds(true)\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: isDarkMode ? 'dark' : 'light',\r\n        },\r\n      }),\r\n    [isDarkMode],\r\n  )\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <NavbarContext.Provider value={{ isOpen, toggleNavbar, closeNavbar }} >\r\n        <DarkModeContext.Provider value={{ isDarkMode, toggleDarkMode }}>\r\n          <FetchingContext.Provider value={{ error, isLoading, endAnimation, isAnimationEnds }}>\r\n            <WeatherDataContext.Provider value={{ setWeatherByCityName, currentPlace: name, weatherList }}>\r\n              <CssBaseline />\r\n              <Router>\r\n                <Header />\r\n                <Navbar />\r\n                <Switch>\r\n                  <Route path=\"/\" component={WeatherList} exact />\r\n                  <Route path=\"/:id\" component={DayPage} exact />\r\n                  <Route path=\"*\">\r\n                    <Redirect to=\"/\" />\r\n                  </Route>\r\n                </Switch>\r\n              </Router>\r\n            </WeatherDataContext.Provider>\r\n          </FetchingContext.Provider>\r\n        </DarkModeContext.Provider>\r\n      </NavbarContext.Provider>\r\n    </ThemeProvider>\r\n  )\r\n}\r\n\r\nexport default App","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\apis\\WeatherService.ts",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Header.tsx",["86"],"import React, { useContext, useState } from 'react'\r\nimport { makeStyles, fade } from '@material-ui/core/styles'\r\nimport { Menu, Search } from '@material-ui/icons'\r\nimport {\r\n    InputBase,\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    IconButton,\r\n} from '@material-ui/core'\r\n\r\nimport { NavbarContext, WeatherDataContext } from '../context'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    search: {\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        '&:hover': {\r\n            backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        },\r\n        width: '100%',\r\n        [theme.breakpoints.up('sm')]: {\r\n            marginLeft: theme.spacing(3),\r\n            width: 'auto',\r\n        },\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 2),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n        color: 'inherit',\r\n        width: '100%'\r\n    },\r\n    inputInput: {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n        transition: theme.transitions.create('width'),\r\n        width: '100%',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: '20ch',\r\n        },\r\n    }\r\n}));\r\n\r\nconst Header = () => {\r\n    const [cityName, setCityName] = useState('')\r\n    const { currentPlace, setWeatherByCityName } = useContext(WeatherDataContext)\r\n    const { toggleNavbar } = useContext(NavbarContext)\r\n    const classes = useStyles()\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCityName(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\" onClick={toggleNavbar!(true)}>\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <div className={classes.search}>\r\n                        <div className={classes.searchIcon}>\r\n                            <Search />\r\n                        </div>\r\n                        <form onSubmit={setWeatherByCityName!(cityName)}>\r\n                            <InputBase\r\n                                onChange={onChange}\r\n                                value={cityName}\r\n                                placeholder={currentPlace!.length > 0 ? currentPlace : \"Search…\"}\r\n                                classes={{\r\n                                    root: classes.inputRoot,\r\n                                    input: classes.inputInput,\r\n                                }}\r\n                                inputProps={{ 'aria-label': 'search' }}\r\n                            />\r\n                        </form>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Header","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Navbar.tsx",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\DayPage.tsx",["87"],"import React, { useContext, useEffect } from 'react'\r\nimport { Redirect, useParams } from 'react-router-dom'\r\nimport { Container, Grid, Paper, Typography } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { NavbarContext, FetchingContext, WeatherDataContext } from '../context'\r\nimport withData from '../hoc/withData'\r\n\r\nimport Chart from './Chart'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    temp: {\r\n        position: 'relative',\r\n        marginRight: '2rem',\r\n        '&>sup': {\r\n            position: 'absolute',\r\n            top: 0,\r\n            right: '-1rem'\r\n        }\r\n    },\r\n    center: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    image: {\r\n        width: 100,\r\n        height: 100,\r\n        borderRadius: '50%',\r\n        backgroundColor: theme.palette.primary.light\r\n    },\r\n    container: {\r\n        paddingTop: theme.spacing(2),\r\n        paddingBottom: theme.spacing(2),\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(3),\r\n    },\r\n    cardHeader: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        flexWrap: 'wrap',\r\n        '&>*:first-child': {\r\n            paddingRight: theme.spacing(2)\r\n        }\r\n    },\r\n}))\r\n\r\ntype Params = {\r\n    id: string\r\n}\r\n\r\nconst DayPage = () => {\r\n    const { weatherList } = useContext(WeatherDataContext)\r\n    const { endAnimation } = useContext(FetchingContext)\r\n    const { closeNavbar } = useContext(NavbarContext)\r\n    const { id } = useParams<Params>()\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        closeNavbar!()\r\n        endAnimation!()\r\n\r\n        return () => {\r\n            closeNavbar!()\r\n        }\r\n    }, [])\r\n\r\n    const index = parseInt(id)\r\n\r\n    if (weatherList![index] === undefined) return <Redirect to=\"/\" />\r\n\r\n    const { day, description, hours, icon, temp, humidity, pressure } = weatherList![index][0]\r\n\r\n    return (\r\n        <Container className={classes.container}>\r\n            <Paper className={classes.paper}>\r\n                <div className={classes.cardHeader}>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        {day} {hours}\r\n                    </Typography>\r\n                    <Typography variant=\"subtitle1\" component=\"div\">\r\n                        {description}\r\n                    </Typography>\r\n                </div>\r\n                <Grid className={classes.center} container>\r\n                    <Grid className={classes.center} item>\r\n                        <Typography className={classes.temp} variant=\"h2\" component=\"div\">\r\n                            {temp}\r\n                            <Typography variant=\"caption\" component=\"sup\">\r\n                                °C\r\n                            </Typography>\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid className={classes.center} item>\r\n                        <img className={classes.image} src={`http://openweathermap.org/img/wn/${icon}@4x.png`} alt={description} />\r\n                    </Grid>\r\n                </Grid>\r\n                <Typography variant=\"subtitle1\" component=\"div\">\r\n                    Влажность: {humidity}%\r\n                    </Typography>\r\n                <Typography variant=\"subtitle1\" component=\"div\">\r\n                    Давление: {pressure} мм рт.\r\n                </Typography>\r\n            </Paper>\r\n            <Chart weatherList={weatherList![index]} />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default withData(DayPage)","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\WeatherList.tsx",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\index.ts",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\navbarContext.ts",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Chart.tsx",["88"],"import React, { useEffect } from 'react'\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\"\r\nimport { makeStyles, Paper, useTheme } from '@material-ui/core'\r\nimport * as am4core from '@amcharts/amcharts4/core'\r\nimport * as am4charts from '@amcharts/amcharts4/charts'\r\nimport { IWeatherListItem } from '../types'\r\n\r\nam4core.useTheme(am4themes_animated)\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '45vh'\r\n    },\r\n    paper: {\r\n        padding: '1.5rem 1rem 1rem 1rem',\r\n        marginTop: '0.5rem'\r\n    }\r\n})\r\n\r\ntype Props = {\r\n    weatherList: IWeatherListItem[]\r\n}\r\n\r\nconst Chart: React.FC<Props> = ({ weatherList }) => {\r\n    const { palette: { background, text, type } } = useTheme()\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n\r\n        const chart = am4core.create('chart', am4charts.XYChart)\r\n        chart.data = weatherList\r\n\r\n        const dateAxis = chart.xAxes.push(new am4charts.DateAxis())\r\n        dateAxis.renderer.grid.template.location = 0\r\n        dateAxis.tooltip!.background.fill = am4core.color(text.primary)\r\n        dateAxis.tooltip!.background.strokeWidth = 0\r\n        dateAxis.tooltip!.label.fill = am4core.color(background.default)\r\n        dateAxis.renderer.grid.template.stroke = am4core.color(text.primary)\r\n        dateAxis.renderer.labels.template.fill = am4core.color(text.primary)\r\n\r\n        const valueAxis = chart.yAxes.push(new am4charts.ValueAxis())\r\n        valueAxis!.tooltip!.disabled = true\r\n        valueAxis.renderer.minWidth = 35\r\n        valueAxis.renderer.grid.template.stroke = am4core.color(text.primary)\r\n        valueAxis.renderer.labels.template.fill = am4core.color(text.primary)\r\n\r\n        const series = chart.series.push(new am4charts.LineSeries())\r\n        series.dataFields.dateX = 'dt'\r\n        series.dataFields.valueY = 'temp'\r\n        series.tooltipText = '{valueY.value}'\r\n        if (type === 'dark') {\r\n            series.stroke = am4core.color('#fff')\r\n        }\r\n\r\n        chart.cursor = new am4charts.XYCursor()\r\n        chart.cursor.behavior = 'none';\r\n        return () => {\r\n            chart.dispose()\r\n        }\r\n\r\n    }, [type, weatherList])\r\n\r\n    return (\r\n        <Paper className={classes.paper}>\r\n            <div id=\"chart\" className={classes.root}></div>\r\n        </Paper>\r\n    )\r\n}\r\n\r\nexport default Chart","C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\WeatherItem.tsx",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\hoc\\withData.tsx",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\weatherDataContext.ts",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\types\\index.ts",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\fetchingContext.ts",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\context\\darkModeContext.ts",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Loader.tsx",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\components\\Error.tsx",[],"C:\\Users\\alexa\\OneDrive\\Рабочий стол\\Rainbow\\src\\types\\WeatherListItem.ts",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":36,"column":6,"nodeType":"95","endLine":36,"endColumn":8,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":8,"column":5,"nodeType":"99","messageId":"100","endLine":8,"endColumn":15},{"ruleId":"93","severity":1,"message":"101","line":67,"column":8,"nodeType":"95","endLine":67,"endColumn":10,"suggestions":"102"},{"ruleId":"93","severity":1,"message":"103","line":62,"column":8,"nodeType":"95","endLine":62,"endColumn":27,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'catchPositionError' and 'catchWeatherAPIError'. Either include them or remove the dependency array.","ArrayExpression",["107"],"@typescript-eslint/no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'closeNavbar' and 'endAnimation'. Either include them or remove the dependency array.",["108"],"React Hook useEffect has missing dependencies: 'background.default' and 'text.primary'. Either include them or remove the dependency array.",["109"],"no-global-assign","no-unsafe-negation",{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [catchPositionError, catchWeatherAPIError]",{"range":"116","text":"117"},"Update the dependencies array to be: [closeNavbar, endAnimation]",{"range":"118","text":"119"},"Update the dependencies array to be: [background.default, text.primary, type, weatherList]",{"range":"120","text":"121"},[1490,1492],"[catchPositionError, catchWeatherAPIError]",[1731,1733],"[closeNavbar, endAnimation]",[2172,2191],"[background.default, text.primary, type, weatherList]"]